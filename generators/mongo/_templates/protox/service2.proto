syntax = "proto3";
package grpcService;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
//import "google/protobuf/StringValue.proto";
//option go_package = "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options";
//import "github.com/grpc-ecosystem/protoc-gen-swagger/options/openapiv2.proto";
//import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "ToDo service"
		version: "1.0"
		contact: {
			name: "go-grpc-http-rest-microservice-tutorial project"
			url: "https://github.com/amsokol/go-grpc-http-rest-microservice-tutorial"
			email: "medium@amsokol.com"
      }
    }
    schemes: HTTP
    consumes: "application/json"
    produces: "application/json"
    responses: {
		key: "404"
		value: {
			description: "Returned when the resource does not exist."
			schema: {
				json_schema: {
					type: STRING
				}
			}
		}
	}
};

service UsersApi {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
    description: "aaa service for << insert description here >>"
  };

    rpc Create (CreateRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      post: "/api/<no value>"
      body: "*"
    };
    }

    rpc Get (GetRequest) returns (GetResponse) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      get: "/api/<no value>/{id}"
    };
    }

    rpc Search (SearchRequest) returns (SearchResponse) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      post: "/api/<no value>/search"
      body: "*"
    };
    }

    rpc Update (UpdateRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      patch: "/api/<no value>/{id}"
      body: "*"
    };
    }

    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      delete: "/api/<no value>/{id}"
    };
    }

    rpc Restore (RestoreRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: ""
      description: ""
      consumes: "application/json"
      produces: "application/json"
    };
        option (google.api.http) = {
      put: "/api/<no value>/{id}"
    };
    }
}

// Create
message CreateRequest {
    string name = 1 [(validator.field) = {string_not_empty: true }];
}

message CreateResponse {
    string id = 1;
}

// Get
message GetRequest {
    //string id = 1 [(validator.field) = {string_not_empty: true }];
    uint64 id    = 1 [(validate.rules).uint64.gt    = 999];
}

message GetResponse {
    string id = 1;
    string name = 2 [(gogoproto.moretags) = "bson:\"name\" msgpack:\"name\""];
}

// Search
message SearchRequest {
    string name = 1;
    int64 limit = 2;
    int64 offset = 3;
}

message SearchResponse {
    repeated GetResponse data = 1;
}

// Update
message UpdateRequest {
    string id = 1 [(validator.field) = {string_not_empty: true }];
    string name = 2 [(validator.field) = {string_not_empty: true }];
}

// Delete
message DeleteRequest {
    string id = 1 [(validator.field) = {string_not_empty: true }];
}

// Delete
message RestoreRequest {
    string id = 1 [(validator.field) = {string_not_empty: true }];
}
